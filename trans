#!/usr/bin/python3
# COMP3311 21T3 Ass2 ... print a transcript for a given student

import sys
import psycopg2
import re
from helpers import getStudent

# define any local helper functions here

### set up some globals

usage = f"Usage: {sys.argv[0]} zID"
db = None

### process command-line args

argc = len(sys.argv)
if argc < 2:
  print(usage)
  exit(1)
zid = sys.argv[1]
if zid[0] == 'z':
  zid = zid[1:8]
digits = re.compile("^\d{7}$")
if not digits.match(zid):
  print(f"Invalid student ID {zid}")
  exit(1)

# manipulate database

try:
  db = psycopg2.connect("dbname=mymyunsw")
  stuInfo = getStudent(db,zid)
  if not stuInfo:
    print(f"Invalid student ID {zid}")
    exit()

  zid = stuInfo[0]
  print(f"{zid} {stuInfo[1]}, {stuInfo[2]}")
  
  # get transcript for Student
  cur = db.cursor()
  query = """
  select * from getTranscript(%s)
  """
  cur.execute(query, [zid])
  transcript = cur.fetchall()


  # sort through transcript
  totalUOC = 0
  attemptedUOC = 0
  totalMarks = 0
  for course in transcript:
    code, term, name, mark, grade, uoc = course

    if mark == None:
      mark = '-'

    if grade in ['HD', 'DN', 'CR', 'PS', 'AF', 'FL', 'UF']:
      attemptedUOC += uoc
      if mark != '-':
        totalMarks += uoc * mark

    if grade in ['AF', 'FL', 'UF', 'E', 'F']:
      uoc = 'fail'
      print(f"{code} {term} {name:<32s}{mark:>3} {grade:2s}   {uoc}")

    if grade in ['AS','AW','PW','NA','RD','NF','LE','PE','WD','WJ']:
      uoc = '' 
      print(f"{code} {term} {name:<32s}{mark:>3} {grade:2s}") 

    if grade not in ['AF', 'FL', 'UF','AS','AW','PW','NA','RD','NF','LE','PE','WD','WJ']:
      if grade != 'null':
        totalUOC += uoc
      print(f"{code} {term} {name:<32s}{mark:>3} {grade:2s}  {uoc:2d}uoc")
    
  wam = totalMarks/attemptedUOC
  print(f"UOC = {totalUOC}, WAM = {wam:.1f}")
  

except Exception as err:
  print("DB error: ", err)
finally:
  if db:
    db.close()

